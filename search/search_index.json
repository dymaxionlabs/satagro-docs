{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DYMAX \u00b6 Esta es la documentaci\u00f3n oficial de AgroScan, la plataforma de procesamiento de datos satelitales para la detecci\u00f3n de cultivos de Dymaxion Labs. Secciones \u00b6 Casos de uso : Gu\u00eda para conocer la potencialidad de la herramienta, tanto para usuarios como administradores. Metodolog\u00eda : Documento donde se describen las fuentes de datos y procesos utilizados para generar los mapas.","title":"Inicio"},{"location":"#dymax","text":"Esta es la documentaci\u00f3n oficial de AgroScan, la plataforma de procesamiento de datos satelitales para la detecci\u00f3n de cultivos de Dymaxion Labs.","title":"DYMAX"},{"location":"#secciones","text":"Casos de uso : Gu\u00eda para conocer la potencialidad de la herramienta, tanto para usuarios como administradores. Metodolog\u00eda : Documento donde se describen las fuentes de datos y procesos utilizados para generar los mapas.","title":"Secciones"},{"location":"deploy/","text":"Implementaci\u00f3n \u00b6 En esta secci\u00f3n se detallan instrucciones para poder implementar la plataforma en producci\u00f3n. Este documento apunta a operadores y administradores de sistemas que necesiten poner en funcionamiento la plataforma en un servidor, y por lo tanto se asumen conocimientos b\u00e1sciso de manejo de terminal, instalaci\u00f3n de paquetes y configuraci\u00f3n de servicios. En los repositorios se incluyen ejemplos de archivos de configuraci\u00f3n cuando es apropiado, pero siempre se deben tomar como ejemplos y ajustar seg\u00fan sea necesario a su criterio. Requerimientos de SO Se asume que la plataforma va a ejecutarse en un entorno con la distribuci\u00f3n Ubuntu 18.04 instalada. Para otros sistemas operativos, ser\u00e1 necesario consultar la documentaci\u00f3n correspondiente de las dependencias. Dependencias \u00b6 La plataforma consiste en un backend, implementado sobre Python, y un frontend implementado en Nodejs. Utiliza PostgreSQL como base de datos, y Redis como cache y base de datos para la cola de trabajos. A continuaci\u00f3n se detallan instrucciones para instalar y configurar estas dependencias. PostgreSQL y extensiones (TimescaleDB y PostGIS) \u00b6 S\u00f3lo para Ubuntu 18.04 Las instrucciones est\u00e1n pensadas para Ubuntu 18.04. Puede verificar la gu\u00eda de instalaci\u00f3n de TimescaleDB si est\u00e1 utilizando otro sistema operativo. Agregue el siguiente repositorio de PostgreSQL para obtener la \u00faltimas versiones de los pquetes de PostgreSQL (esto es necesario para versiones de Ubuntu menores a 19.04). # `lsb_release -c -s` should return the correct codename of your OS echo \"deb http://apt.postgresql.org/pub/repos/apt/ $( lsb_release -c -s ) -pgdg main\" | sudo tee /etc/apt/sources.list.d/pgdg.list wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - sudo apt-get update Agregue el repositorio de TimescaleDB y luego instale TimescaleDB, que al hacerlo automaticamente descargar\u00e1 e instalar\u00e1 tambi\u00e9n la versi\u00f3n correcta del servidor de PostgreSQL. # Add TimescaleDBs PPA sudo add-apt-repository ppa:timescale/timescaledb-ppa sudo apt-get update # Now install appropriate package for PG version sudo apt install timescaledb-postgresql-11 Es recomendable que utilice la herramienta timescaledb-tune para ajustar y optimizar la base de datos para TimescaleDB. sudo timescaledb-tune Ahora, instale la extensi\u00f3n PostGIS 3 para esta versi\u00f3n de PostgreSQL. sudo apt-get install postgresql-11-postgis-3 Finalmente, reinicie la instancia de PostgreSQL. sudo service postgresql restart Python, Redis, GDAL \u00b6 Instale Python y otras dependencias como GDAL y el servidor de Redis. sudo apt-get install \\ build-essential \\ git \\ gdal-bin \\ gettext \\ libgdal-dev \\ libpq-dev \\ libproj-dev \\ python3 \\ python3-dev \\ python3-pip \\ redis-server Nginx \u00b6 Nginx se utiliza para servir tanto el backend (API y administrador) como el frontend (sitio web de la plataforma). Instale Nginx desde los repositorios de Ubuntu: sudo apt install nginx Backend \u00b6 Instalaci\u00f3n \u00b6 Primero clone el repositorio del backend. git clone https://github.com/undp/satlomas-back.git cd satlomas-back/ Para instalar las dependencias correctas del backend, debe instalar el manejador de paquetes Pipenv . pip install --user -U pipenv Luego, ejecute lo siguiente para instalar todas las dependencias necesarias. Esto crear\u00e1 un entorno virtual para este proyecto. pipenv install Una vez que finalize la instalaci\u00f3n, estar\u00e1 listo para configurar el backend. Configuraci\u00f3n \u00b6 Base de datos \u00b6 Cree un rol de superusuario para el usuario que est\u00e1 utilizando actualmente. Si sabe que va a ejecutar PostgreSQL con otros usuario, por favor reemplaze la variable $USER como corresponde. sudo -u postgres createuser -s $USER Cree la base de datos. createdb satlomas Configure una contrase\u00f1a para el usuario que acaba de crear. Ejecute el siguiente comando reemplazando foobar por una contrase\u00f1a \u00fanica: Contrase\u00f1a Es muy importante que defina una contrase\u00f1a \u00fanica y dificil de adivinar. psql satlomas -c \"ALTER USER $USER WITH PASSWORD 'foobar'\" Agregue las extensiones TimescaleDB y PostGIS a la base de datos creada. psql satlomas -c \"CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE\" psql satlomas -c \"CREATE EXTENSION IF NOT EXISTS postgis CASCADE\" Registraci\u00f3n en Copernicus Open Access Hub \u00b6 Para que la plataforma pueda descargar los productos del sat\u00e9lite Sentinel-1 y Sentinel-2 de la ESA, es necesario estar registrado en Copernicus Open Access Hub . Para registrase, ingrese aqu\u00ed . Tome nota del nombre de usuario y contrase\u00f1a dado que ser\u00e1 necesario al momento de configurar el backend. Registraci\u00f3n en NASA EarthData \u00b6 Para descargar los productos de MODIS VI, es necesario estar registrado en NASA EarthData . Puede registrarse ingresando aqu\u00ed . Tome nota del nombre de usuario y contrase\u00f1a dado que ser\u00e1 necesario al momento de configurar el backend. Variables de entorno \u00b6 Copie env.sample y guarde un archivo nuevo llamada .env . cp env.sample .env Ahora edite .env seg\u00fan sus necesidades. El archivo env.sample es un ejemplo con valores por defecto para algunas variables, pero algunas de ellas debe completarlas. A continuaci\u00f3n se describen las variables que deben ser configuradas para el funcionamiento de la plataforma. Variable Descripci\u00f3n SECRET_KEY String \u00fanico de caracteres alfanum\u00e9ricos, utilizado para firmas criptogr\u00e1ficas. Puede generar uno aqu\u00ed . ALLOWED_HOSTS Lista de hosts habilitados. Deber\u00eda ingresar el dominio y/o IP p\u00fablica del servidor DB_USER Usuario de la BD (deber\u00eda ser el nombre del usuario actual) DB_PASSWORD Contrase\u00f1a de la BD (la contrase\u00f1a que defini\u00f3 antes) SCIHUB_USER Usuario de SciHub SCIHUB_PASS Contrase\u00f1a de SciHub MODIS_USER Usuario de EarthData MODIS_PASS Contrase\u00f1a de EarthData Inicializaci\u00f3n \u00b6 Ingrese al entorno virtual creado por Pipenv, y proceda con la inicializaci\u00f3n de la base de datos. pipenv shell ./manage.py migrate # Correr las migraciones Luego, cree un superusuario para SatLomas. Este ser\u00e1 el primer usuario administrador, con el que podr\u00e1 registrar nuevos administradores o usuarios. ./manage.py createsuperuser Luego de seguir las instrucciones del comando, tendr\u00e1 un usuario y contrase\u00f1a para ingresar al administrador del backend. Frontend \u00b6 Instalaci\u00f3n \u00b6 Primero debe instalar Node v12. Ejecute los siguientes comandos: curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt-get install -y nodejs Luego, clone el repositorio del frontend: git clone https://github.com/undp/satlomas-front.git cd satlomas-front/ Instale todas las dependencias con npm : npm install Finalmente, ejecute el siguiente comando para generar un build del sitio web: npm run build Configuraci\u00f3n de servicios \u00b6 M\u00e1s informaci\u00f3n Esta secci\u00f3n de la documentaci\u00f3n est\u00e1 basada en la gu\u00eda How To Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu 18.04 , de Digital Ocean. Para m\u00e1s informaci\u00f3n para depurar los servicios, puede consultarla. Backend \u00b6 Comience creando un nuevo archivo para el socket del servicio del backend: sudo nano /etc/systemd/system/gunicorn.service Copie lo siguiente dentro del archivo: [Unit] Description=gunicorn socket [Socket] ListenStream=/run/gunicorn.sock [Install] WantedBy=sockets.target Guarde y ci\u00e9rrelo. Para el siguiente paso es necesario que verifique la ruta del entorno virtual del backend. Desde el directorio del c\u00f3digo del backend, ejecute el siguiente comando: pipenv --venv Tome nota de la ruta que devuelve el comando. Ahora, cree un nuevo archivo para el servicio. El nombre de archivo del servicio deber\u00eda coincidir con el del socket, a excepci\u00f3n de la extensi\u00f3n: sudo nano /etc/systemd/system/gunicorn.service Copie el siguiente contenido: [Unit] Description=gunicorn daemon Requires=gunicorn.socket After=network.target [Service] User=ubuntu Group=www-data WorkingDirectory=/home/ubuntu/satlomas-back ExecStart=/home/ubuntu/.local/share/virtualenvs/satlomas-back-XVGhZdP0/bin/gunicorn \\ --access-logfile - \\ --timeout 600 \\ --workers 3 \\ --bind unix:/run/gunicorn.sock \\ satlomas.wsgi:application [Install] WantedBy=multi-user.target Ajuste WorkingDirectory a la ruta absoluta del repositorio clonado del backend. Luego, ajuste la ruta absoluta de ExecStart a la del entorno virtual de Pipenv, agregando al final /bin/gunicorn . Tambi\u00e9n ser\u00e1 necesario que defina el User y Group con el que se ejecutar\u00e1 el proceso. Este usuario deber\u00eda tener permisos para poder acceder al repositorio del backend. Puede ajustar tambi\u00e9n la cantidad de workers y el timeout permitido, o agregar otras opciones de Gunicorn si es necesario. Finalmente, puede iniciar y activar el servicio. Esto crear\u00e1 un archivo /run/gunicorn.sock y se iniciar\u00e1 el servidor. Cuando se realiza una conexi\u00f3n al socket, systemd automaticamente inicia el servicio gunicorn.service para manejar el pedido. sudo systemctl start gunicorn.socket sudo systemctl enable gunicorn.socket Frontend \u00b6 De manera similar, para el servidor web del frontend ser\u00e1 administrador por systemd. Cree un nuevo archivo para el servicio del frontend: sudo nano /etc/systemd/system/satlomas-front.service y copie el siguiente contenido: [Unit] Description=Platform frontend next.js app After=network.target [Service] Environment=NODE_ENV=production User=ubuntu Group=www-data WorkingDirectory=/home/ubuntu/satlomas-front ExecStart=/usr/bin/node server.js [Install] WantedBy=multi-user.target Ajuste WorkingDirectory a la ruta absoluta del repositorio clonado del frontend. Tambi\u00e9n ser\u00e1 necesario que defina el User y Group con el que se ejecutar\u00e1 el proceso. Este usuario deber\u00eda tener permisos para poder acceder al repositorio del backend. Finalmente, puede iniciar y activar el servicio. sudo systemctl start satlomas-front.service sudo systemctl enable satlomas-front.service Nginx \u00b6 A modo ejemplo, se presentan dos archivos de configuraci\u00f3n para Nginx, para servir el backend y frontend respectivamente. En este ejemplo, se asume que se tienen registrado el dominio satlomas.com , y dos registros A para los subdominios: api.satlomas.com : Backend app.satlomas.com : Frontend Cree un nuevo archivo /etc/nginx/sites-available/satlomas-back sudo nano /etc/nginx/sites-available/satlomas-back y copie dentro de \u00e9ste el siguiente contenido: server { server_name api.satlomas.com; location = /favicon.ico { access_log off; log_not_found off; } location /static/ { root /home/ubuntu/satlomas-back; } location / { include proxy_params; proxy_pass http://unix:/home/ubuntu/satlomas-back/satlomas.sock; proxy_connect_timeout 600; proxy_send_timeout 600; proxy_read_timeout 600; send_timeout 600; } } Ajuste server_name al subdominio que corresponda al backend, y root a la ruta absoluta del repositorio del backend (en este caso, el repositorio fue clonado dentro del directorio home del usuario ubuntu ). Luego cree otro archivo /etc/nginx/sites-available/satlomas-front sudo nano /etc/nginx/sites-available/satlomas-front y copie lo siguiente: server { server_name app.satlomas.com; location /static/ { root /home/ubuntu/satlomas-front/public; } location /_next/static/ { alias /home/ubuntu/satlomas-front/.next/static/; } location / { # default port, could be changed if you use next with custom server proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; # if you have try_files like this, remove it from our block # otherwise next app will not work properly # try_files $uri $uri/ =404; } } Nuevamente, ajuste server_name al subdominio correspndiente para el frontend, y las ocurrencias de /home/ubuntu/satlomas-front a la ruta absoluta del repositorio del frontend. Finalmente, haga enlaces simb\u00f3licos de estos dos archivos al directorio /etc/nginx/sites-enabled/ para habilitar los sitios: sudo ln -s /etc/nginx/sites-available/satlomas-back /etc/nginx/sites-enabled/ sudo ln -s /etc/nginx/sites-available/satlomas-front /etc/nginx/sites-enabled/ y reinicie Nginx: sudo systemctl restart nginx Con esto concluye la implementaci\u00f3n de la plataforma. Podr\u00e1 acceder al backend desde http://api.satlomas.com/ , y al frontend desde http://app.satlomas.com/ (suponiendo que configur\u00f3 los sitios con esos subdominios). Configuraci\u00f3n SSL \u00b6 Es posible configurar SSL a trav\u00e9s de los certificados gratuitos de Let's Encrypt . Instrucciones para Ubuntu 18.04 Las siguientes instrucciones est\u00e1n basadas en la gu\u00eda de Certbot para la distribuci\u00f3n de Ubuntu 18.04 y Nginx. Si desea ver m\u00e1s informaci\u00f3n puede acceder aqu\u00ed . Deber\u00e1 agregar el PPA de Certbot a la lista de repositorios. Para esto, ejecute los siguientes comandos: sudo apt-get update sudo apt-get install software-properties-common sudo add-apt-repository universe sudo add-apt-repository ppa:certbot/certbot sudo apt-get update Ejecute este comando para instalar Certbot: sudo apt-get install certbot python3-certbot-nginx Ahora ejecute este comando para obtener un certificado y hacer que Certbot edite los archivos de configuraci\u00f3n de Nginx de los sitios habilitados autom\u00e1ticamente. sudo certbot --nginx El certificado se deber\u00eda actualizar automaticamente a trav\u00e9s del servicio de Certbot.","title":"Implementaci\u00f3n"},{"location":"deploy/#implementacion","text":"En esta secci\u00f3n se detallan instrucciones para poder implementar la plataforma en producci\u00f3n. Este documento apunta a operadores y administradores de sistemas que necesiten poner en funcionamiento la plataforma en un servidor, y por lo tanto se asumen conocimientos b\u00e1sciso de manejo de terminal, instalaci\u00f3n de paquetes y configuraci\u00f3n de servicios. En los repositorios se incluyen ejemplos de archivos de configuraci\u00f3n cuando es apropiado, pero siempre se deben tomar como ejemplos y ajustar seg\u00fan sea necesario a su criterio. Requerimientos de SO Se asume que la plataforma va a ejecutarse en un entorno con la distribuci\u00f3n Ubuntu 18.04 instalada. Para otros sistemas operativos, ser\u00e1 necesario consultar la documentaci\u00f3n correspondiente de las dependencias.","title":"Implementaci\u00f3n"},{"location":"deploy/#dependencias","text":"La plataforma consiste en un backend, implementado sobre Python, y un frontend implementado en Nodejs. Utiliza PostgreSQL como base de datos, y Redis como cache y base de datos para la cola de trabajos. A continuaci\u00f3n se detallan instrucciones para instalar y configurar estas dependencias.","title":"Dependencias"},{"location":"deploy/#postgresql-y-extensiones-timescaledb-y-postgis","text":"S\u00f3lo para Ubuntu 18.04 Las instrucciones est\u00e1n pensadas para Ubuntu 18.04. Puede verificar la gu\u00eda de instalaci\u00f3n de TimescaleDB si est\u00e1 utilizando otro sistema operativo. Agregue el siguiente repositorio de PostgreSQL para obtener la \u00faltimas versiones de los pquetes de PostgreSQL (esto es necesario para versiones de Ubuntu menores a 19.04). # `lsb_release -c -s` should return the correct codename of your OS echo \"deb http://apt.postgresql.org/pub/repos/apt/ $( lsb_release -c -s ) -pgdg main\" | sudo tee /etc/apt/sources.list.d/pgdg.list wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - sudo apt-get update Agregue el repositorio de TimescaleDB y luego instale TimescaleDB, que al hacerlo automaticamente descargar\u00e1 e instalar\u00e1 tambi\u00e9n la versi\u00f3n correcta del servidor de PostgreSQL. # Add TimescaleDBs PPA sudo add-apt-repository ppa:timescale/timescaledb-ppa sudo apt-get update # Now install appropriate package for PG version sudo apt install timescaledb-postgresql-11 Es recomendable que utilice la herramienta timescaledb-tune para ajustar y optimizar la base de datos para TimescaleDB. sudo timescaledb-tune Ahora, instale la extensi\u00f3n PostGIS 3 para esta versi\u00f3n de PostgreSQL. sudo apt-get install postgresql-11-postgis-3 Finalmente, reinicie la instancia de PostgreSQL. sudo service postgresql restart","title":"PostgreSQL y extensiones (TimescaleDB y PostGIS)"},{"location":"deploy/#python-redis-gdal","text":"Instale Python y otras dependencias como GDAL y el servidor de Redis. sudo apt-get install \\ build-essential \\ git \\ gdal-bin \\ gettext \\ libgdal-dev \\ libpq-dev \\ libproj-dev \\ python3 \\ python3-dev \\ python3-pip \\ redis-server","title":"Python, Redis, GDAL"},{"location":"deploy/#nginx","text":"Nginx se utiliza para servir tanto el backend (API y administrador) como el frontend (sitio web de la plataforma). Instale Nginx desde los repositorios de Ubuntu: sudo apt install nginx","title":"Nginx"},{"location":"deploy/#backend","text":"","title":"Backend"},{"location":"deploy/#instalacion","text":"Primero clone el repositorio del backend. git clone https://github.com/undp/satlomas-back.git cd satlomas-back/ Para instalar las dependencias correctas del backend, debe instalar el manejador de paquetes Pipenv . pip install --user -U pipenv Luego, ejecute lo siguiente para instalar todas las dependencias necesarias. Esto crear\u00e1 un entorno virtual para este proyecto. pipenv install Una vez que finalize la instalaci\u00f3n, estar\u00e1 listo para configurar el backend.","title":"Instalaci\u00f3n"},{"location":"deploy/#configuracion","text":"","title":"Configuraci\u00f3n"},{"location":"deploy/#base-de-datos","text":"Cree un rol de superusuario para el usuario que est\u00e1 utilizando actualmente. Si sabe que va a ejecutar PostgreSQL con otros usuario, por favor reemplaze la variable $USER como corresponde. sudo -u postgres createuser -s $USER Cree la base de datos. createdb satlomas Configure una contrase\u00f1a para el usuario que acaba de crear. Ejecute el siguiente comando reemplazando foobar por una contrase\u00f1a \u00fanica: Contrase\u00f1a Es muy importante que defina una contrase\u00f1a \u00fanica y dificil de adivinar. psql satlomas -c \"ALTER USER $USER WITH PASSWORD 'foobar'\" Agregue las extensiones TimescaleDB y PostGIS a la base de datos creada. psql satlomas -c \"CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE\" psql satlomas -c \"CREATE EXTENSION IF NOT EXISTS postgis CASCADE\"","title":"Base de datos"},{"location":"deploy/#registracion-en-copernicus-open-access-hub","text":"Para que la plataforma pueda descargar los productos del sat\u00e9lite Sentinel-1 y Sentinel-2 de la ESA, es necesario estar registrado en Copernicus Open Access Hub . Para registrase, ingrese aqu\u00ed . Tome nota del nombre de usuario y contrase\u00f1a dado que ser\u00e1 necesario al momento de configurar el backend.","title":"Registraci\u00f3n en Copernicus Open Access Hub"},{"location":"deploy/#registracion-en-nasa-earthdata","text":"Para descargar los productos de MODIS VI, es necesario estar registrado en NASA EarthData . Puede registrarse ingresando aqu\u00ed . Tome nota del nombre de usuario y contrase\u00f1a dado que ser\u00e1 necesario al momento de configurar el backend.","title":"Registraci\u00f3n en NASA EarthData"},{"location":"deploy/#variables-de-entorno","text":"Copie env.sample y guarde un archivo nuevo llamada .env . cp env.sample .env Ahora edite .env seg\u00fan sus necesidades. El archivo env.sample es un ejemplo con valores por defecto para algunas variables, pero algunas de ellas debe completarlas. A continuaci\u00f3n se describen las variables que deben ser configuradas para el funcionamiento de la plataforma. Variable Descripci\u00f3n SECRET_KEY String \u00fanico de caracteres alfanum\u00e9ricos, utilizado para firmas criptogr\u00e1ficas. Puede generar uno aqu\u00ed . ALLOWED_HOSTS Lista de hosts habilitados. Deber\u00eda ingresar el dominio y/o IP p\u00fablica del servidor DB_USER Usuario de la BD (deber\u00eda ser el nombre del usuario actual) DB_PASSWORD Contrase\u00f1a de la BD (la contrase\u00f1a que defini\u00f3 antes) SCIHUB_USER Usuario de SciHub SCIHUB_PASS Contrase\u00f1a de SciHub MODIS_USER Usuario de EarthData MODIS_PASS Contrase\u00f1a de EarthData","title":"Variables de entorno"},{"location":"deploy/#inicializacion","text":"Ingrese al entorno virtual creado por Pipenv, y proceda con la inicializaci\u00f3n de la base de datos. pipenv shell ./manage.py migrate # Correr las migraciones Luego, cree un superusuario para SatLomas. Este ser\u00e1 el primer usuario administrador, con el que podr\u00e1 registrar nuevos administradores o usuarios. ./manage.py createsuperuser Luego de seguir las instrucciones del comando, tendr\u00e1 un usuario y contrase\u00f1a para ingresar al administrador del backend.","title":"Inicializaci\u00f3n"},{"location":"deploy/#frontend","text":"","title":"Frontend"},{"location":"deploy/#instalacion_1","text":"Primero debe instalar Node v12. Ejecute los siguientes comandos: curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt-get install -y nodejs Luego, clone el repositorio del frontend: git clone https://github.com/undp/satlomas-front.git cd satlomas-front/ Instale todas las dependencias con npm : npm install Finalmente, ejecute el siguiente comando para generar un build del sitio web: npm run build","title":"Instalaci\u00f3n"},{"location":"deploy/#configuracion-de-servicios","text":"M\u00e1s informaci\u00f3n Esta secci\u00f3n de la documentaci\u00f3n est\u00e1 basada en la gu\u00eda How To Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu 18.04 , de Digital Ocean. Para m\u00e1s informaci\u00f3n para depurar los servicios, puede consultarla.","title":"Configuraci\u00f3n de servicios"},{"location":"deploy/#backend_1","text":"Comience creando un nuevo archivo para el socket del servicio del backend: sudo nano /etc/systemd/system/gunicorn.service Copie lo siguiente dentro del archivo: [Unit] Description=gunicorn socket [Socket] ListenStream=/run/gunicorn.sock [Install] WantedBy=sockets.target Guarde y ci\u00e9rrelo. Para el siguiente paso es necesario que verifique la ruta del entorno virtual del backend. Desde el directorio del c\u00f3digo del backend, ejecute el siguiente comando: pipenv --venv Tome nota de la ruta que devuelve el comando. Ahora, cree un nuevo archivo para el servicio. El nombre de archivo del servicio deber\u00eda coincidir con el del socket, a excepci\u00f3n de la extensi\u00f3n: sudo nano /etc/systemd/system/gunicorn.service Copie el siguiente contenido: [Unit] Description=gunicorn daemon Requires=gunicorn.socket After=network.target [Service] User=ubuntu Group=www-data WorkingDirectory=/home/ubuntu/satlomas-back ExecStart=/home/ubuntu/.local/share/virtualenvs/satlomas-back-XVGhZdP0/bin/gunicorn \\ --access-logfile - \\ --timeout 600 \\ --workers 3 \\ --bind unix:/run/gunicorn.sock \\ satlomas.wsgi:application [Install] WantedBy=multi-user.target Ajuste WorkingDirectory a la ruta absoluta del repositorio clonado del backend. Luego, ajuste la ruta absoluta de ExecStart a la del entorno virtual de Pipenv, agregando al final /bin/gunicorn . Tambi\u00e9n ser\u00e1 necesario que defina el User y Group con el que se ejecutar\u00e1 el proceso. Este usuario deber\u00eda tener permisos para poder acceder al repositorio del backend. Puede ajustar tambi\u00e9n la cantidad de workers y el timeout permitido, o agregar otras opciones de Gunicorn si es necesario. Finalmente, puede iniciar y activar el servicio. Esto crear\u00e1 un archivo /run/gunicorn.sock y se iniciar\u00e1 el servidor. Cuando se realiza una conexi\u00f3n al socket, systemd automaticamente inicia el servicio gunicorn.service para manejar el pedido. sudo systemctl start gunicorn.socket sudo systemctl enable gunicorn.socket","title":"Backend"},{"location":"deploy/#frontend_1","text":"De manera similar, para el servidor web del frontend ser\u00e1 administrador por systemd. Cree un nuevo archivo para el servicio del frontend: sudo nano /etc/systemd/system/satlomas-front.service y copie el siguiente contenido: [Unit] Description=Platform frontend next.js app After=network.target [Service] Environment=NODE_ENV=production User=ubuntu Group=www-data WorkingDirectory=/home/ubuntu/satlomas-front ExecStart=/usr/bin/node server.js [Install] WantedBy=multi-user.target Ajuste WorkingDirectory a la ruta absoluta del repositorio clonado del frontend. Tambi\u00e9n ser\u00e1 necesario que defina el User y Group con el que se ejecutar\u00e1 el proceso. Este usuario deber\u00eda tener permisos para poder acceder al repositorio del backend. Finalmente, puede iniciar y activar el servicio. sudo systemctl start satlomas-front.service sudo systemctl enable satlomas-front.service","title":"Frontend"},{"location":"deploy/#nginx_1","text":"A modo ejemplo, se presentan dos archivos de configuraci\u00f3n para Nginx, para servir el backend y frontend respectivamente. En este ejemplo, se asume que se tienen registrado el dominio satlomas.com , y dos registros A para los subdominios: api.satlomas.com : Backend app.satlomas.com : Frontend Cree un nuevo archivo /etc/nginx/sites-available/satlomas-back sudo nano /etc/nginx/sites-available/satlomas-back y copie dentro de \u00e9ste el siguiente contenido: server { server_name api.satlomas.com; location = /favicon.ico { access_log off; log_not_found off; } location /static/ { root /home/ubuntu/satlomas-back; } location / { include proxy_params; proxy_pass http://unix:/home/ubuntu/satlomas-back/satlomas.sock; proxy_connect_timeout 600; proxy_send_timeout 600; proxy_read_timeout 600; send_timeout 600; } } Ajuste server_name al subdominio que corresponda al backend, y root a la ruta absoluta del repositorio del backend (en este caso, el repositorio fue clonado dentro del directorio home del usuario ubuntu ). Luego cree otro archivo /etc/nginx/sites-available/satlomas-front sudo nano /etc/nginx/sites-available/satlomas-front y copie lo siguiente: server { server_name app.satlomas.com; location /static/ { root /home/ubuntu/satlomas-front/public; } location /_next/static/ { alias /home/ubuntu/satlomas-front/.next/static/; } location / { # default port, could be changed if you use next with custom server proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; # if you have try_files like this, remove it from our block # otherwise next app will not work properly # try_files $uri $uri/ =404; } } Nuevamente, ajuste server_name al subdominio correspndiente para el frontend, y las ocurrencias de /home/ubuntu/satlomas-front a la ruta absoluta del repositorio del frontend. Finalmente, haga enlaces simb\u00f3licos de estos dos archivos al directorio /etc/nginx/sites-enabled/ para habilitar los sitios: sudo ln -s /etc/nginx/sites-available/satlomas-back /etc/nginx/sites-enabled/ sudo ln -s /etc/nginx/sites-available/satlomas-front /etc/nginx/sites-enabled/ y reinicie Nginx: sudo systemctl restart nginx Con esto concluye la implementaci\u00f3n de la plataforma. Podr\u00e1 acceder al backend desde http://api.satlomas.com/ , y al frontend desde http://app.satlomas.com/ (suponiendo que configur\u00f3 los sitios con esos subdominios).","title":"Nginx"},{"location":"deploy/#configuracion-ssl","text":"Es posible configurar SSL a trav\u00e9s de los certificados gratuitos de Let's Encrypt . Instrucciones para Ubuntu 18.04 Las siguientes instrucciones est\u00e1n basadas en la gu\u00eda de Certbot para la distribuci\u00f3n de Ubuntu 18.04 y Nginx. Si desea ver m\u00e1s informaci\u00f3n puede acceder aqu\u00ed . Deber\u00e1 agregar el PPA de Certbot a la lista de repositorios. Para esto, ejecute los siguientes comandos: sudo apt-get update sudo apt-get install software-properties-common sudo add-apt-repository universe sudo add-apt-repository ppa:certbot/certbot sudo apt-get update Ejecute este comando para instalar Certbot: sudo apt-get install certbot python3-certbot-nginx Ahora ejecute este comando para obtener un certificado y hacer que Certbot edite los archivos de configuraci\u00f3n de Nginx de los sitios habilitados autom\u00e1ticamente. sudo certbot --nginx El certificado se deber\u00eda actualizar automaticamente a trav\u00e9s del servicio de Certbot.","title":"Configuraci\u00f3n SSL"},{"location":"methodology/","text":"Metodolog\u00eda \u00b6 Modelo de detecci\u00f3n de cultivos. \u00b6 En esta secci\u00f3n se detallan las fuentes de datos que est\u00e1n siendo utilizadas para el modelo de detecci\u00f3n de cultivos, los procedimientos para calibrar las im\u00e1genes, y los resultados preliminares del modelo de aprendizaje autom\u00e1tico aplicado. Fuentes de datos \u00b6 Im\u00e1genes satelitales \u00b6 Para analizar los problemas que conciernen a la industria agropecuaria, la plataforma DYMAX es capaz de procesar tanto im\u00e1genes \u00f3pticas como de radar. Este tipo de datos luego se puede asociar con informaci\u00f3n metereol\u00f3gica y de sensores en terreno. La resoluci\u00f3n espacial de las im\u00e1genes de Sentinel-2 es de 10m por pixel para las bandas RGB (rojo, verde y azul) y NIR (infrarrojo cercano), y de 20m para el resto de las bandas del infrarrojo. El tiempo de revisita es de aproximadamente 10 d\u00edas. En el caso de que haya regiones cubiertas por nubes en alg\u00fan momento del a\u00f1o, se completar\u00e1 con escenas de Sentinel-1. Este sensor es muy utilizado en la pr\u00e1ctica para detectar inundaciones o edificaciones, dado que permite observar el suelo a\u00fan en climas desfavorables para la captura de im\u00e1genes. Las firmas espectrales caputaras calculadas a partir de los datos de estos sensores permiten, mediante la aplicaci\u00f3n de t\u00e9cnicas de machine learning, poder distinguir entre distintos tipos de cultivos y usos del suelo a lo largo del a\u00f1o y de los distintos tipos de geograf\u00eda presentes en grandes extensiones. Sensores IoT y Estaciones meteorol\u00f3gicas \u00b6 Otras fuentes de datos compatible con la plataforma, son los obtenidos por sensores IoT o estaciones meteorol\u00f3gicas. La particularidad que tienen es que su actualizaci\u00f3n es constante, otorg\u00e1ndole la capacidad de generar alertas inmediatamente despu\u00e9s de que se detecte algo por fuera de los l\u00edmites establecidos como normales. Los datos provenientes de estas fuentes permiten complementar los atributos generados a partir de los sat\u00e9lites, de manera tal de obtener detecciones m\u00e1s precisas Preprocesamiento de im\u00e1genes \u00b6 Sentinel-2 \u00b6 Para poder utilizar las im\u00e1genes multiespectrales de Sentinel-2 y las im\u00e1genes SAR de Sentinel-1 fue necesario aplicar una serie de pasos de calibraci\u00f3n. Dado que se descargaron escenas de nivel L1C para Sentinel-2, fue necesario ejecutar la herramienta de c\u00f3digo abierto sen2cor, provista por la plataforma de la ESA. Este proceso realiza las correcciones atmosf\u00e9ricas y geom\u00e9tricas de las escenas y genera una versi\u00f3n de las im\u00e1genes a nivel bottom-of-atmosphere, designado como nivel L2A. Tambi\u00e9n genera una m\u00e1scara de nubes, que luego utilizamos para descartar aquellos p\u00edxeles de la imagen que est\u00e1n cubiertos de nubes. Estos p\u00edxeles no son v\u00e1lidos para el modelo, y ser\u00e1n reemplazados por los de la imagen de Sentinel-1 del per\u00edodo correspondiente. Para generar el mosaico, aplicamos la herramienta de c\u00f3digo abierto sen2mosaic, para Python. Sentinel-1 \u00b6 Para trabajar con las im\u00e1genes de este sensor para la detecci\u00f3n de edificaciones y cambios en la cobertura del suelo, se descargaron escenas del producto GRD (Ground Range Detected) donde los valores de los p\u00edxeles representan la magnitud detectada. La resoluci\u00f3n espacial de estas im\u00e1genes es de aproximadamente 10m por p\u00edxel. Luego de descargar los productos se procede con la calibraci\u00f3n radiom\u00e9trica, que permite calcular el valor sigma0 de las bandas de polarizaci\u00f3n VV y VH. Al hacer esta calibraci\u00f3n, tambi\u00e9n se utiliza el DEM de SRTM para ortorectificar las im\u00e1genes. El segundo paso es la eliminaci\u00f3n del ruido Speckle con la aplicaci\u00f3n de un filtro espec\u00edfico para este tipo de ruido, caracter\u00edstico en las im\u00e1genes SAR. El siguiente paso que realizamos es calcular la proporci\u00f3n VV/VH a partir de las bandas VV y HH, que es un atributo que utiliza el modelo de cobertura de suelo. Finalmente se concatenan las 3 bandas en una sola imagen, y se corregistran de a pares de escenas con la herramienta AROSICS. Este paso es necesario para luego poder generar el mosaico en base a todas las escenas descargadas.","title":"Metodolog\u00eda"},{"location":"methodology/#metodologia","text":"","title":"Metodolog\u00eda"},{"location":"methodology/#modelo-de-deteccion-de-cultivos","text":"En esta secci\u00f3n se detallan las fuentes de datos que est\u00e1n siendo utilizadas para el modelo de detecci\u00f3n de cultivos, los procedimientos para calibrar las im\u00e1genes, y los resultados preliminares del modelo de aprendizaje autom\u00e1tico aplicado.","title":"Modelo de detecci\u00f3n de cultivos."},{"location":"methodology/#fuentes-de-datos","text":"","title":"Fuentes de datos"},{"location":"methodology/#imagenes-satelitales","text":"Para analizar los problemas que conciernen a la industria agropecuaria, la plataforma DYMAX es capaz de procesar tanto im\u00e1genes \u00f3pticas como de radar. Este tipo de datos luego se puede asociar con informaci\u00f3n metereol\u00f3gica y de sensores en terreno. La resoluci\u00f3n espacial de las im\u00e1genes de Sentinel-2 es de 10m por pixel para las bandas RGB (rojo, verde y azul) y NIR (infrarrojo cercano), y de 20m para el resto de las bandas del infrarrojo. El tiempo de revisita es de aproximadamente 10 d\u00edas. En el caso de que haya regiones cubiertas por nubes en alg\u00fan momento del a\u00f1o, se completar\u00e1 con escenas de Sentinel-1. Este sensor es muy utilizado en la pr\u00e1ctica para detectar inundaciones o edificaciones, dado que permite observar el suelo a\u00fan en climas desfavorables para la captura de im\u00e1genes. Las firmas espectrales caputaras calculadas a partir de los datos de estos sensores permiten, mediante la aplicaci\u00f3n de t\u00e9cnicas de machine learning, poder distinguir entre distintos tipos de cultivos y usos del suelo a lo largo del a\u00f1o y de los distintos tipos de geograf\u00eda presentes en grandes extensiones.","title":"Im\u00e1genes satelitales"},{"location":"methodology/#sensores-iot-y-estaciones-meteorologicas","text":"Otras fuentes de datos compatible con la plataforma, son los obtenidos por sensores IoT o estaciones meteorol\u00f3gicas. La particularidad que tienen es que su actualizaci\u00f3n es constante, otorg\u00e1ndole la capacidad de generar alertas inmediatamente despu\u00e9s de que se detecte algo por fuera de los l\u00edmites establecidos como normales. Los datos provenientes de estas fuentes permiten complementar los atributos generados a partir de los sat\u00e9lites, de manera tal de obtener detecciones m\u00e1s precisas","title":"Sensores IoT y Estaciones meteorol\u00f3gicas"},{"location":"methodology/#preprocesamiento-de-imagenes","text":"","title":"Preprocesamiento de im\u00e1genes"},{"location":"methodology/#sentinel-2","text":"Para poder utilizar las im\u00e1genes multiespectrales de Sentinel-2 y las im\u00e1genes SAR de Sentinel-1 fue necesario aplicar una serie de pasos de calibraci\u00f3n. Dado que se descargaron escenas de nivel L1C para Sentinel-2, fue necesario ejecutar la herramienta de c\u00f3digo abierto sen2cor, provista por la plataforma de la ESA. Este proceso realiza las correcciones atmosf\u00e9ricas y geom\u00e9tricas de las escenas y genera una versi\u00f3n de las im\u00e1genes a nivel bottom-of-atmosphere, designado como nivel L2A. Tambi\u00e9n genera una m\u00e1scara de nubes, que luego utilizamos para descartar aquellos p\u00edxeles de la imagen que est\u00e1n cubiertos de nubes. Estos p\u00edxeles no son v\u00e1lidos para el modelo, y ser\u00e1n reemplazados por los de la imagen de Sentinel-1 del per\u00edodo correspondiente. Para generar el mosaico, aplicamos la herramienta de c\u00f3digo abierto sen2mosaic, para Python.","title":"Sentinel-2"},{"location":"methodology/#sentinel-1","text":"Para trabajar con las im\u00e1genes de este sensor para la detecci\u00f3n de edificaciones y cambios en la cobertura del suelo, se descargaron escenas del producto GRD (Ground Range Detected) donde los valores de los p\u00edxeles representan la magnitud detectada. La resoluci\u00f3n espacial de estas im\u00e1genes es de aproximadamente 10m por p\u00edxel. Luego de descargar los productos se procede con la calibraci\u00f3n radiom\u00e9trica, que permite calcular el valor sigma0 de las bandas de polarizaci\u00f3n VV y VH. Al hacer esta calibraci\u00f3n, tambi\u00e9n se utiliza el DEM de SRTM para ortorectificar las im\u00e1genes. El segundo paso es la eliminaci\u00f3n del ruido Speckle con la aplicaci\u00f3n de un filtro espec\u00edfico para este tipo de ruido, caracter\u00edstico en las im\u00e1genes SAR. El siguiente paso que realizamos es calcular la proporci\u00f3n VV/VH a partir de las bandas VV y HH, que es un atributo que utiliza el modelo de cobertura de suelo. Finalmente se concatenan las 3 bandas en una sola imagen, y se corregistran de a pares de escenas con la herramienta AROSICS. Este paso es necesario para luego poder generar el mosaico en base a todas las escenas descargadas.","title":"Sentinel-1"},{"location":"usage/","text":"Casos de Uso \u00b6 En esta secci\u00f3n se describen los diferentes casos de aplicaci\u00f3n de nuestra plataforma DYMAX en lo relacionado al procesamiento masivo de im\u00e1genes sateliltales con machine learning. Delimitaci\u00f3n de lotes \u00b6 El proceso de detecci\u00f3n masiva de cultivos requiere en primer lugar de la identificaci\u00f3n de los bordes de los lotes. Se busca de este modo aumentar la precisi\u00f3n en la posterior caracterizaci\u00f3n de los cultivos, descartanto \u00e1reas con pasturas, caminos y cuerpos de agua. Esta caracter\u00edstica es \u00fatil para empresas privadas y oficinas gubernamentales para llevar a cabo la gesti\u00f3n de la tierra, la calificaci\u00f3n de la tierra y la inspecci\u00f3n de cultivos. Al d\u00eda de hoy hemos mapeado lotes a lo largo de todo Argentina y el sur de Brasil. Detecci\u00f3n de cultivos \u00b6 Con DYMAX hemos analizado las casi 40.000.000 de hect\u00e1reas agr\u00edcolas en Argentina en busca de soja, ma\u00edz, trigo y cebada. Combinando im\u00e1genes satelitales multiespectrales, de radar y verdad de campo, podemos detectar diferentes cultivos considerando el grado de crecimiento y el tipo de suelo. Monitoreo de Deforestaci\u00f3n \u00b6 La ciudad de Manos se encuentra ubicada en el centro de la regi\u00f3n del Amazonas (Brasil), siendo unas de las mayores \u00e1reas selv\u00e1ticas del planeta. Las invasiones junto con el r\u00e1pido crecimiento urbano han generado un proceso de deforestaci\u00f3n masivo. A partir de una alianza con el Banco Interamericano de Desarrollo (BID) y la Sub-Secretar\u00eda de Tecnolog\u00edas de Informaci\u00f3n del municipio de Manaos, procesamos con DYMAX im\u00e1genes de drones correspondientes a siete semanas consecutivas. A partir de los insights capturados por nuestra plataforma, se trabaj\u00f3 en la predicci\u00f3n de nuevas deforestaciones para el desarrollo de nuevos asentamientos informales. Datos relevantes: 2.2M de poblaci\u00f3n, 11.000 km2. Publicaci\u00f3n del BID: Plataforma SatLomas \u00b6 El ecosistema de Lomas en Lima (Per\u00fa) constituye un espacio invaluable para la conservaci\u00f3n de la naturaleza en la ciudad, la adaptaci\u00f3n al cambio clim\u00e1tico y para el crecimiento econ\u00f3mico. M\u00e1s all\u00e1 del rol fundamental que cumplen para la resiliencia de la ciudad ante fen\u00f3menos metereol\u00f3gicos extremos, se encuentran en espacios vulnerables. Junto con la agencia espacial peruana (CONIDA) y la oficina local del Programa de las Naciones Unidas para el Desarrollo (PNUD) desarrollamos una plataforma web de monitoreo de actividades vinculadas con la miner\u00eda ilegal. Para tales fines, nuestra plataforma DYMAX combina en este caso im\u00e1genes de radar, multiespectrales y sensores IoT para la creaci\u00f3n de un sistema de alertas y notificaciones que permitan una detecci\u00f3n temprana.","title":"Gu\u00eda de Uso"},{"location":"usage/#casos-de-uso","text":"En esta secci\u00f3n se describen los diferentes casos de aplicaci\u00f3n de nuestra plataforma DYMAX en lo relacionado al procesamiento masivo de im\u00e1genes sateliltales con machine learning.","title":"Casos de Uso"},{"location":"usage/#delimitacion-de-lotes","text":"El proceso de detecci\u00f3n masiva de cultivos requiere en primer lugar de la identificaci\u00f3n de los bordes de los lotes. Se busca de este modo aumentar la precisi\u00f3n en la posterior caracterizaci\u00f3n de los cultivos, descartanto \u00e1reas con pasturas, caminos y cuerpos de agua. Esta caracter\u00edstica es \u00fatil para empresas privadas y oficinas gubernamentales para llevar a cabo la gesti\u00f3n de la tierra, la calificaci\u00f3n de la tierra y la inspecci\u00f3n de cultivos. Al d\u00eda de hoy hemos mapeado lotes a lo largo de todo Argentina y el sur de Brasil.","title":"Delimitaci\u00f3n de lotes"},{"location":"usage/#deteccion-de-cultivos","text":"Con DYMAX hemos analizado las casi 40.000.000 de hect\u00e1reas agr\u00edcolas en Argentina en busca de soja, ma\u00edz, trigo y cebada. Combinando im\u00e1genes satelitales multiespectrales, de radar y verdad de campo, podemos detectar diferentes cultivos considerando el grado de crecimiento y el tipo de suelo.","title":"Detecci\u00f3n de cultivos"},{"location":"usage/#monitoreo-de-deforestacion","text":"La ciudad de Manos se encuentra ubicada en el centro de la regi\u00f3n del Amazonas (Brasil), siendo unas de las mayores \u00e1reas selv\u00e1ticas del planeta. Las invasiones junto con el r\u00e1pido crecimiento urbano han generado un proceso de deforestaci\u00f3n masivo. A partir de una alianza con el Banco Interamericano de Desarrollo (BID) y la Sub-Secretar\u00eda de Tecnolog\u00edas de Informaci\u00f3n del municipio de Manaos, procesamos con DYMAX im\u00e1genes de drones correspondientes a siete semanas consecutivas. A partir de los insights capturados por nuestra plataforma, se trabaj\u00f3 en la predicci\u00f3n de nuevas deforestaciones para el desarrollo de nuevos asentamientos informales. Datos relevantes: 2.2M de poblaci\u00f3n, 11.000 km2. Publicaci\u00f3n del BID:","title":"Monitoreo de Deforestaci\u00f3n"},{"location":"usage/#plataforma-satlomas","text":"El ecosistema de Lomas en Lima (Per\u00fa) constituye un espacio invaluable para la conservaci\u00f3n de la naturaleza en la ciudad, la adaptaci\u00f3n al cambio clim\u00e1tico y para el crecimiento econ\u00f3mico. M\u00e1s all\u00e1 del rol fundamental que cumplen para la resiliencia de la ciudad ante fen\u00f3menos metereol\u00f3gicos extremos, se encuentran en espacios vulnerables. Junto con la agencia espacial peruana (CONIDA) y la oficina local del Programa de las Naciones Unidas para el Desarrollo (PNUD) desarrollamos una plataforma web de monitoreo de actividades vinculadas con la miner\u00eda ilegal. Para tales fines, nuestra plataforma DYMAX combina en este caso im\u00e1genes de radar, multiespectrales y sensores IoT para la creaci\u00f3n de un sistema de alertas y notificaciones que permitan una detecci\u00f3n temprana.","title":"Plataforma SatLomas"}]}